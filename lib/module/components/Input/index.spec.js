import _regeneratorRuntime from"@babel/runtime/regenerator";import React from'react';import{render,screen,cleanup,fireEvent}from'@testing-library/react-native';import Input from'.';import{it,expect,afterEach,jest}from'@jest/globals';var mockedFunction=jest.fn();afterEach(cleanup);it('Render Input correctly',function(){render(React.createElement(Input,null));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();});it('Render Input correctly and to render only the input',function(){render(React.createElement(Input,null));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();expect(textInput.props.children.filter(function(item){return item;})).toHaveLength(1);});it('Render Input correctly and to render input and label',function(){render(React.createElement(Input,{label:"text label"}));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();expect(textInput.props.children.filter(function(item){return item;})).toHaveLength(2);});it('Render Input correctly and to render input, label and caption',function(){render(React.createElement(Input,{label:"text label",caption:"text caption"}));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();expect(textInput.props.children.filter(function(item){return item;})).toHaveLength(3);});it('Render Input correctly and to render input and have placeholder equal to `text placeholder`',function(){render(React.createElement(Input,{placeholder:"text placeholder"}));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();expect(textInput.props.children[1].props.children[0].props.placeholder).toBe('text placeholder');});it('Render Input correctly and to render input and have value equal to `text value`',function(){render(React.createElement(Input,{value:"text value"}));var textInput=screen.getByTestId('input-component');expect(textInput).toBeDefined();expect(textInput.props.children[1].props.children[0].props.value).toBe('text value');});it('Render Input correctly and to render input and execute function onFocus, onBlur, onChangeText',function _callee(){var textInput;return _regeneratorRuntime.async(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:render(React.createElement(Input,{value:"text value",onChange:mockedFunction,onFocus:mockedFunction,onBlur:mockedFunction,onChangeText:mockedFunction}));textInput=screen.getByDisplayValue('text value');expect(textInput).toBeDefined();fireEvent(textInput,'changeText',mockedFunction);fireEvent(textInput,'change',mockedFunction);fireEvent(textInput,'focus',mockedFunction);fireEvent(textInput,'blur',mockedFunction);expect(mockedFunction).toBeCalledTimes(4);case 8:case"end":return _context.stop();}},null,null,null,Promise);});
//# sourceMappingURL=index.spec.js.mapkedFunction,onFocus:mockedFunction,onBlur:mockedFunction,onChangeText:mockedFunction,__source:{fileName:_jsxFileName,lineNumber:58,columnNumber:5}}));textInput=screen.getByDisplayValue('text value');expect(textInput).toBeDefined();fireEvent(textInput,'changeText',mockedFunction);fireEvent(textInput,'change',mockedFunction);fireEvent(textInput,'focus',mockedFunction);fireEvent(textInput,'blur',mockedFunction);expect(mockedFunction).toBeCalledTimes(4);case 8:case"end":return _context.stop();}},null,null,null,Promise);});
//# sourceMappingURL=index.spec.js.map